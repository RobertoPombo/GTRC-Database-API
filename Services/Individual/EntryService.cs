using Castle.Components.DictionaryAdapter.Xml;
using GTRC_Basics;
using GTRC_Basics.Models;
using GTRC_Basics.Models.DTOs;
using GTRC_Database_API.Services.Interfaces;

namespace GTRC_Database_API.Services
{
    public class EntryService(IEntryContext iEntryContext,
        IBaseContext<Car> iCarContext,
        IBaseContext<Season> iSeasonContext,
        IBaseContext<Team> iTeamContext,
        UserService userService,
        SeasonService seasonService,
        EventService eventService,
        EntryDatetimeService entryDatetimeService,
        BaseService<EntryUserEvent> entryUserEventService,
        IBaseContext<Entry> iBaseContext) : BaseService<Entry>(iBaseContext)
    {
        public bool Validate(Entry? obj)
        {
            bool isValid = true;
            if (obj is null) { return false; }

            Team? team = null;
            if (obj.Team is not null) { team = iTeamContext.GetById(obj.TeamId).Result; };
            if (team is null)
            {
                List<Team> list = iTeamContext.GetAll().Result;
                if (list.Count == 0) { obj = null; return false; }
                else { obj.Team = list[0]; obj.TeamId = list[0].Id; isValid = false; }
            }
            else { obj.Team = team; }
            Car? car = null;
            if (obj.Car is not null) { car = iCarContext.GetById(obj.CarId).Result; };
            if (car is null)
            {
                List<Car> list = iCarContext.GetAll().Result;
                if (list.Count == 0) { obj = null; return false; }
                else { obj.Car = list[0]; obj.CarId = list[0].Id; isValid = false; }
            }
            else { obj.Car = car; }
            if (obj.RegisterDate > DateTime.UtcNow || obj.RegisterDate < GlobalValues.DateTimeMinValue) { obj.RegisterDate = DateTime.UtcNow; isValid = false; }
            if (obj.SignOutDate > GlobalValues.DateTimeMaxValue || obj.SignOutDate < obj.RegisterDate) { obj.SignOutDate = GlobalValues.DateTimeMaxValue; isValid = false; }
            if (obj.RaceNumberPreference > Entry.MaxRaceNumber) { obj.RaceNumberPreference = Entry.MaxRaceNumber; isValid = false; }
            else if (obj.RaceNumberPreference < Entry.MinRaceNumber) { obj.RaceNumberPreference = Entry.MinRaceNumber; isValid = false; }

            return isValid;
        }

        public async Task<bool> ValidateUniqProps(Entry? obj)
        {
            bool isValidUniqProps = true;
            if (obj is null) { return false; }

            Season? season = null;
            if (obj.Season is not null) { season = iSeasonContext.GetById(obj.SeasonId).Result; };
            if (season is null)
            {
                List<Season> list = iSeasonContext.GetAll().Result;
                if (list.Count == 0) { obj = null; return false; }
                else { obj.Season = list[0]; obj.SeasonId = list[0].Id; isValidUniqProps = false; }
            }
            else { obj.Season = season; }
            if (obj.RaceNumber > Entry.MaxRaceNumber) { obj.RaceNumber = Entry.MaxRaceNumber; isValidUniqProps = false; }
            else if (obj.RaceNumber < Entry.MinRaceNumber) { obj.RaceNumber = Entry.MinRaceNumber; isValidUniqProps = false; }

            int startIndexSeason = 0;
            List<int> idListSeason = [];
            List<Season> listSeason = iSeasonContext.GetAll().Result;
            for (int index = 0; index < listSeason.Count; index++)
            {
                idListSeason.Add(listSeason[index].Id);
                if (listSeason[index].Id == obj.SeasonId) { startIndexSeason = index; }
            }
            int indexSeason = startIndexSeason;

            int startRaceNumber = obj.RaceNumber;
            while (!await IsUnique(obj))
            {
                isValidUniqProps = false;
                if (obj.RaceNumber < Entry.MaxRaceNumber) { obj.RaceNumber += 1; } else { obj.RaceNumber = Entry.DefaultRaceNumber; }
                if (obj.RaceNumber == startRaceNumber)
                {
                    if (indexSeason < idListSeason.Count - 1) { indexSeason++; }
                    else { indexSeason = 0; }
                    obj.Season = listSeason[indexSeason];
                    obj.SeasonId = listSeason[indexSeason].Id;
                    if (indexSeason == startIndexSeason) { obj = null; return false; }
                }
            }

            Validate(obj);
            return isValidUniqProps;
        }

        public async Task<Entry?> GetTemp() { Entry obj = new(); await ValidateUniqProps(obj); return obj; }

        public async Task<List<Entry>> GetAutoGeneratedRaceNumbers(int seasonId)
        {
            List<Entry> list = [];
            List<Entry> listEntries = await GetChildObjects(typeof(Season), seasonId);
            foreach (Entry entry in listEntries)
            {
                if (entry.RaceNumber != entry.RaceNumberPreference) { list.Add(entry); }
            }
            return list;
        }

        public async Task<List<Entry>> UpdateRaceNumbers(int seasonId) // Not yet implemented: Nur Meister der Vorsaison darf #1 haben
        {
            List<Entry> updatedEntries = [];
            DateTime seasonStartDate = (await eventService.GetFirst(seasonId))?.Date ?? DateTime.MaxValue;
            int seriesId = (await iSeasonContext.GetById(seasonId))?.SeriesId ?? GlobalValues.NoId;
            List<Season> seasons = await seasonService.GetChildObjects(typeof(Series), seriesId);
            for (int index = seasons.Count - 1; index >= 0; index--)
            {
                DateTime previousSeasonStartDate = (await eventService.GetFirst(seasons[index].Id))?.Date ?? DateTime.MaxValue;
                if (seasonStartDate <= previousSeasonStartDate) { seasons.RemoveAt(index); }
            }
            List<Entry> entries = await GetAutoGeneratedRaceNumbers(seasonId);
            foreach (Entry entry in entries)
            {
                UniqPropsDto<Entry> uniqPropsDto = new();
                uniqPropsDto.Dto.SeasonId = seasonId;
                uniqPropsDto.Dto.RaceNumber = entry.RaceNumberPreference;
                Entry? entryRival = await GetByUniqProps(uniqPropsDto);
                if (entryRival is null)
                {
                    entry.RaceNumber = entry.RaceNumberPreference;
                    await Update(entry);
                    for (int index = 0; index < updatedEntries.Count; index++) { if (updatedEntries[index].Id == entry.Id) { updatedEntries.RemoveAt(index); break; } }
                    updatedEntries.Add(entry);
                }
                else
                {
                    int[] registrationEntryCount = [0, 0];
                    int[] registrationUserCount = [0, 0];
                    DateTime[] dateFirstRegistration = [DateTime.MaxValue, DateTime.MaxValue];
                    List<User>[] users = [await userService.GetByEntry(entry), await userService.GetByEntry(entryRival)];
                    foreach (Season previousSeason in seasons)
                    {
                        uniqPropsDto.Dto.SeasonId = previousSeason.Id;
                        uniqPropsDto.Dto.RaceNumber = entry.RaceNumberPreference;
                        Entry? previousEntry = await GetByUniqProps(uniqPropsDto);
                        if (previousEntry is not null)
                        {
                            bool[] isInEntry = [false, false];
                            List<User> previousUsers = await userService.GetByEntry(previousEntry);
                            foreach (User previousUser in previousUsers)
                            {
                                for (int index = 0; index < users.Length; index++)
                                {
                                    foreach (User user in users[index])
                                    {
                                        if (user.Id == previousUser.Id)
                                        {
                                            registrationUserCount[index]++;
                                            if (!isInEntry[index]) { registrationEntryCount[index]++; }
                                            if (dateFirstRegistration[index] > previousEntry.RegisterDate) { dateFirstRegistration[index] = previousEntry.RegisterDate; }
                                            isInEntry[index] = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    bool[] grantRaceNumber = [registrationEntryCount[0] > registrationEntryCount[1], registrationEntryCount[1] > registrationEntryCount[0]];
                    if (grantRaceNumber[0] == grantRaceNumber[1])
                    {
                        grantRaceNumber = [dateFirstRegistration[0] < dateFirstRegistration[1], dateFirstRegistration[1] < dateFirstRegistration[0]];
                        if (grantRaceNumber[0] == grantRaceNumber[1])
                        {
                            grantRaceNumber = [registrationUserCount[0] > registrationUserCount[1], registrationUserCount[1] > registrationUserCount[0]];
                            if (grantRaceNumber[0] == grantRaceNumber[1])
                            {
                                grantRaceNumber = [entry.RegisterDate < entryRival.RegisterDate, entryRival.RegisterDate < entry.RegisterDate];
                            }
                        }
                    }
                    if (grantRaceNumber[0])
                    {
                        entry.RaceNumber = entry.RaceNumberPreference;
                        await Update(entry);
                        for (int index =  0; index < updatedEntries.Count; index++) { if (updatedEntries[index].Id == entry.Id) { updatedEntries.RemoveAt(index); break; } }
                        updatedEntries.Add(entry);
                        await ValidateUniqProps(entryRival);
                        await Update(entryRival);
                        for (int index = 0; index < updatedEntries.Count; index++) { if (updatedEntries[index].Id == entryRival.Id) { updatedEntries.RemoveAt(index); break; } }
                        updatedEntries.Add(entryRival);
                    }
                }
            }
            return updatedEntries;
        }

        public async Task<List<Entry>> GetByUserSeason(User user, Season season)
        {
            List<Entry> listEntries = [];
            List<Event> listEvents = await eventService.GetChildObjects(typeof(Season), season.Id);
            foreach (Event _event in listEvents)
            {
                List<Entry> listEntriesTemp = await GetByUserEvent(user, _event);
                foreach (Entry entry in listEntriesTemp) { if (!listEntries.Contains(entry)) listEntries.Add(entry); }
            }
            return listEntries;
        }

        public async Task<List<Entry>> GetByUserEvent(User user, Event _event)
        {
            List<Entry> listEntries = [];
            AddDto<EntryUserEvent> addDto = new() { Dto = new EntryUserEventAddDto() { UserId = user.Id, EventId = _event.Id } };
            List<EntryUserEvent> list = await entryUserEventService.GetByProps(addDto);
            foreach (EntryUserEvent obj in list) { if (!listEntries.Contains(obj.Entry)) listEntries.Add(obj.Entry); }
            return listEntries;
        }

        public async Task<byte> GetCarChangeCount(Entry entry, Event nextEvent)
        {
            Season season = entry.Season;
            byte carChangeCount = 0;
            List<EntryDatetime> listCarChanges = Scripts.SortByDate(await entryDatetimeService.GetChildObjects(typeof(Entry), entry.Id));
            List<Event> listEvents = Scripts.SortByDate(await eventService.GetChildObjects(typeof(Season), season.Id));
            Car car0 = entry.Car;
            DateTime startDate = season.DateStartCarChangeLimit;
            for (int eventNr = 0; eventNr < listEvents.Count; eventNr++)
            {
                bool countNextCarChange = true;
                if (listEvents[eventNr].Id == nextEvent.Id) { return carChangeCount; }
                if (eventNr > 0 && startDate < listEvents[eventNr - 1].Date) { startDate = listEvents[eventNr - 1].Date; }
                for (int carChangeIndex = listCarChanges.Count - 1; carChangeIndex >= 0; carChangeIndex--)
                {
                    if (listCarChanges[carChangeIndex].Date > startDate && listCarChanges[carChangeIndex].Date <= listEvents[eventNr].Date)
                    {
                        Car car1 = listCarChanges[carChangeIndex].Car;
                        if (countNextCarChange && car0.Id != car1.Id)
                        {
                            bool changedManufacturerCarclass = car1.ManufacturerId != car0.ManufacturerId || car1.CarclassId != car0.CarclassId;
                            bool countsAsCarChange = changedManufacturerCarclass || (!season.GroupCarRegistrationLimits && TimeSpan.FromDays(season.DaysIgnoreCarRegistrationLimit) <
                                (listCarChanges[carChangeIndex].Date - car1.ReleaseDate.ToDateTime(TimeOnly.MinValue)));
                            if (countsAsCarChange) { carChangeCount++; }
                        }
                        countNextCarChange = false;
                        car0 = car1;
                    }
                }
            }
            return carChangeCount;
        }
    }
}
